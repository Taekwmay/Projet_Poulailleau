from flask import Flask, render_template, jsonify
import mysql.connector
from bluepy.btle import Scanner
import requests
import smtplib
from datetime import datetime
import time

app = Flask(__name__)

# Fonction pour scanner les dispositifs Bluetooth
def scan_bluetooth():
    scanner = Scanner()
    devices = scanner.scan(10)
    for dev in devices:
        print("Device %s (%s), RSSI=%d dB" % (dev.addr, dev.addrType, dev.rssi))
        for (adtype, desc, value) in dev.getScanData():
            print("  %s = %s" % (desc, value))

# Fonction pour récupérer les données météo
def fetch_weather_data():
    url = "https://donneespubliques.meteofrance.fr/?fond=produit&id_produit=90&id_rubrique=32"
    response = requests.get(url)
    data = response.json()
    temperature = data['temperature']
    humidity = data['humidity']
    return temperature, humidity

# Fonction pour stocker les données dans MySQL
def store_sensor_data(temperature, humidity):
    conn = mysql.connector.connect(user='username', password='password',
                                   host='localhost', database='sensor_data')
    cursor = conn.cursor()
    timestamp = datetime.now()
    query = "INSERT INTO sensor_data (timestamp, temperature, humidity) VALUES (%s, %s, %s)"
    cursor.execute(query, (timestamp, temperature, humidity))
    conn.commit()
    cursor.close()
    conn.close()

# Fonction pour envoyer une alerte par e-mail
def send_alert(email, message):
    # Configurations SMTP
    smtp_server = 'smtp.example.com'
    smtp_port = 587
    sender_email = 'your_email@example.com'
    sender_password = 'your_password'

    # Création du message
    subject = 'Alerte capteur météo'
    body = message

    try:
        # Envoi du message
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, email, f"Subject: {subject}\n\n{body}")
        server.quit()
        print("Alerte envoyée avec succès!")
    except Exception as e:
        print("Erreur lors de l'envoi de l'alerte:", str(e))

# Route pour obtenir les données en temps réel
@app.route('/realtime_data')
def get_realtime_data():
    temperature, humidity = fetch_weather_data()
    store_sensor_data(temperature, humidity)
    return jsonify({'temperature': temperature, 'humidity': humidity, 'timestamp': str(datetime.now())})

# Route pour obtenir les données historiques
@app.route('/historical_data')
def get_historical_data():
    conn = mysql.connector.connect(user='username', password='password',
                                   host='localhost', database='sensor_data')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM sensor_data ORDER BY timestamp DESC LIMIT 100")
    data = cursor.fetchall()
    timestamps = [str(row[0]) for row in data]
    temperatures = [row[1] for row in data]
    humidities = [row[2] for row in data]
    cursor.close()
    conn.close()
    return jsonify({'timestamps': timestamps, 'temperatures': temperatures, 'humidities': humidities})

if __name__ == '__main__':
    app.run(debug=True)
